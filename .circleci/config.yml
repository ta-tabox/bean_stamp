version: 2.1 # 2.1 を使うと Orb や他の機能を使用することができる

# 設定で使用する Orb を宣言

orbs:
  ruby: circleci/ruby@1.7.1
  node: circleci/node@5.0.2

jobs:
  build:
    docker:
      - image: cimg/ruby:3.0.4-browsers # ruby3.0.4, node, selenium含むイメージ
    steps:
      - checkout # Git コードをプルダウン
      - ruby/install-deps # Ruby Orb を使って依存関係をインストール
      # Node Orb を使ってパッケージをインストール
      - node/install-packages:
          pkg-manager: yarn

  test:
    # テストを高速化するために「並列ジョブコンテナ」を実行
    parallelism: 3
    docker:
      - image: cimg/ruby:3.0.4-browsers # プライマリ Docker イメージです。ここでステップコマンドが実行されます。
      - image: cimg/mysql:8.0.28 # mysqlイメージ, 開発環境のDocker環境と合わせる
        command: --default-authentication-plugin=mysql_native_password
        environment: # mysql用の環境変数
          MYSQL_ALLOW_EMPTY_PASSWORD: "true"
          MYSQL_ROOT_HOST: "%"
          MYSQL_HOST: db
        name:
          db
          # database.ymlに設定済み？
          # MYSQL_USER: 'root'
          # MYSQL_ROOT_PASSWORD: 'password'
          # MYSQL_PASSWORD: 'password'
          # MYSQL_DATABASE: 'webapp_test'
    # Ruby/Rails 固有の環境変数をプライマリコンテナに適用
    environment:
      BUNDLE_JOBS: "3"
      BUNDLE_RETRY: "3"
      MYSQL_HOST: db
      RAILS_ENV: test
    # 実行する一連のステップ
    steps:
      - checkout
      - ruby/install-deps
      - node/install-packages:
          pkg-manager: yarn

      # データベース上で実行する前にセカンダリコンテナが起動することを確認
      - run:
          command: "dockerize -wait tcp://db:3306 -timeout 1m"
          name: Wait for DB
      - run:
          command: "bundle exec rails db:create"
          name: Database create
      - run:
          command: "bundle exec rails db:schema:load --trace"
          name: Database setup
      - ruby/rspec-test:
          # RSpec を並列実行
          include: spec/**/*_spec.rb
workflows:
  build_and_test: # ワークフローの名前は "build_and_test"
    jobs:
      - build
      - test:
          requires:
            - build
